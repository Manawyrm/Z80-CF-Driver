1     0000              MODULE cf_c
2     0000              LINE 0, "cf/cf.c"
0     0000              
1     0000              ;--------------------------------------------------------
2     0000              ; File Created by SDCC : free open source ANSI-C Compiler
3     0000              ; Version 3.9.1 #11310 (Linux)
4     0000              ;--------------------------------------------------------
5     0000              ; Processed by Z88DK
6     0000              ;--------------------------------------------------------
7     0000              
8     0000              	EXTERN __divschar
9     0000              	EXTERN __divschar_callee
10    0000              	EXTERN __divsint
11    0000              	EXTERN __divsint_callee
12    0000              	EXTERN __divslong
13    0000              	EXTERN __divslong_callee
14    0000              	EXTERN __divslonglong
15    0000              	EXTERN __divslonglong_callee
16    0000              	EXTERN __divsuchar
17    0000              	EXTERN __divsuchar_callee
18    0000              	EXTERN __divuchar
19    0000              	EXTERN __divuchar_callee
20    0000              	EXTERN __divuint
21    0000              	EXTERN __divuint_callee
22    0000              	EXTERN __divulong
23    0000              	EXTERN __divulong_callee
24    0000              	EXTERN __divulonglong
25    0000              	EXTERN __divulonglong_callee
26    0000              	EXTERN __divuschar
27    0000              	EXTERN __divuschar_callee
28    0000              	EXTERN __modschar
29    0000              	EXTERN __modschar_callee
30    0000              	EXTERN __modsint
31    0000              	EXTERN __modsint_callee
32    0000              	EXTERN __modslong
33    0000              	EXTERN __modslong_callee
34    0000              	EXTERN __modslonglong
35    0000              	EXTERN __modslonglong_callee
36    0000              	EXTERN __modsuchar
37    0000              	EXTERN __modsuchar_callee
38    0000              	EXTERN __moduchar
39    0000              	EXTERN __moduchar_callee
40    0000              	EXTERN __moduint
41    0000              	EXTERN __moduint_callee
42    0000              	EXTERN __modulong
43    0000              	EXTERN __modulong_callee
44    0000              	EXTERN __modulonglong
45    0000              	EXTERN __modulonglong_callee
46    0000              	EXTERN __moduschar
47    0000              	EXTERN __moduschar_callee
48    0000              	EXTERN __mulint
49    0000              	EXTERN __mulint_callee
50    0000              	EXTERN __mullong
51    0000              	EXTERN __mullong_callee
52    0000              	EXTERN __mullonglong
53    0000              	EXTERN __mullonglong_callee
54    0000              	EXTERN __mulschar
55    0000              	EXTERN __mulschar_callee
56    0000              	EXTERN __mulsuchar
57    0000              	EXTERN __mulsuchar_callee
58    0000              	EXTERN __muluschar
59    0000              	EXTERN __muluschar_callee
60    0000              	EXTERN __rlslonglong
61    0000              	EXTERN __rlslonglong_callee
62    0000              	EXTERN __rlulonglong
63    0000              	EXTERN __rlulonglong_callee
64    0000              	EXTERN __rrslonglong
65    0000              	EXTERN __rrslonglong_callee
66    0000              	EXTERN __rrulonglong
67    0000              	EXTERN __rrulonglong_callee
68    0000              	EXTERN ___sdcc_call_hl
69    0000              	EXTERN ___sdcc_call_iy
70    0000              	EXTERN ___sdcc_enter_ix
71    0000              	EXTERN _banked_call
72    0000              	EXTERN _banked_ret
73    0000              	EXTERN ___fs2schar
74    0000              	EXTERN ___fs2schar_callee
75    0000              	EXTERN ___fs2sint
76    0000              	EXTERN ___fs2sint_callee
77    0000              	EXTERN ___fs2slong
78    0000              	EXTERN ___fs2slong_callee
79    0000              	EXTERN ___fs2slonglong
80    0000              	EXTERN ___fs2slonglong_callee
81    0000              	EXTERN ___fs2uchar
82    0000              	EXTERN ___fs2uchar_callee
83    0000              	EXTERN ___fs2uint
84    0000              	EXTERN ___fs2uint_callee
85    0000              	EXTERN ___fs2ulong
86    0000              	EXTERN ___fs2ulong_callee
87    0000              	EXTERN ___fs2ulonglong
88    0000              	EXTERN ___fs2ulonglong_callee
89    0000              	EXTERN ___fsadd
90    0000              	EXTERN ___fsadd_callee
91    0000              	EXTERN ___fsdiv
92    0000              	EXTERN ___fsdiv_callee
93    0000              	EXTERN ___fseq
94    0000              	EXTERN ___fseq_callee
95    0000              	EXTERN ___fsgt
96    0000              	EXTERN ___fsgt_callee
97    0000              	EXTERN ___fslt
98    0000              	EXTERN ___fslt_callee
99    0000              	EXTERN ___fsmul
100   0000              	EXTERN ___fsmul_callee
101   0000              	EXTERN ___fsneq
102   0000              	EXTERN ___fsneq_callee
103   0000              	EXTERN ___fssub
104   0000              	EXTERN ___fssub_callee
105   0000              	EXTERN ___schar2fs
106   0000              	EXTERN ___schar2fs_callee
107   0000              	EXTERN ___sint2fs
108   0000              	EXTERN ___sint2fs_callee
109   0000              	EXTERN ___slong2fs
110   0000              	EXTERN ___slong2fs_callee
111   0000              	EXTERN ___slonglong2fs
112   0000              	EXTERN ___slonglong2fs_callee
113   0000              	EXTERN ___uchar2fs
114   0000              	EXTERN ___uchar2fs_callee
115   0000              	EXTERN ___uint2fs
116   0000              	EXTERN ___uint2fs_callee
117   0000              	EXTERN ___ulong2fs
118   0000              	EXTERN ___ulong2fs_callee
119   0000              	EXTERN ___ulonglong2fs
120   0000              	EXTERN ___ulonglong2fs_callee
121   0000              	EXTERN ____sdcc_2_copy_src_mhl_dst_deix
122   0000              	EXTERN ____sdcc_2_copy_src_mhl_dst_bcix
123   0000              	EXTERN ____sdcc_4_copy_src_mhl_dst_deix
124   0000              	EXTERN ____sdcc_4_copy_src_mhl_dst_bcix
125   0000              	EXTERN ____sdcc_4_copy_src_mhl_dst_mbc
126   0000              	EXTERN ____sdcc_4_ldi_nosave_bc
127   0000              	EXTERN ____sdcc_4_ldi_save_bc
128   0000              	EXTERN ____sdcc_4_push_hlix
129   0000              	EXTERN ____sdcc_4_push_mhl
130   0000              	EXTERN ____sdcc_lib_setmem_hl
131   0000              	EXTERN ____sdcc_ll_add_de_bc_hl
132   0000              	EXTERN ____sdcc_ll_add_de_bc_hlix
133   0000              	EXTERN ____sdcc_ll_add_de_hlix_bc
134   0000              	EXTERN ____sdcc_ll_add_de_hlix_bcix
135   0000              	EXTERN ____sdcc_ll_add_deix_bc_hl
136   0000              	EXTERN ____sdcc_ll_add_deix_hlix
137   0000              	EXTERN ____sdcc_ll_add_hlix_bc_deix
138   0000              	EXTERN ____sdcc_ll_add_hlix_deix_bc
139   0000              	EXTERN ____sdcc_ll_add_hlix_deix_bcix
140   0000              	EXTERN ____sdcc_ll_asr_hlix_a
141   0000              	EXTERN ____sdcc_ll_asr_mbc_a
142   0000              	EXTERN ____sdcc_ll_copy_src_de_dst_hlix
143   0000              	EXTERN ____sdcc_ll_copy_src_de_dst_hlsp
144   0000              	EXTERN ____sdcc_ll_copy_src_deix_dst_hl
145   0000              	EXTERN ____sdcc_ll_copy_src_deix_dst_hlix
146   0000              	EXTERN ____sdcc_ll_copy_src_deixm_dst_hlsp
147   0000              	EXTERN ____sdcc_ll_copy_src_desp_dst_hlsp
148   0000              	EXTERN ____sdcc_ll_copy_src_hl_dst_de
149   0000              	EXTERN ____sdcc_ll_copy_src_hlsp_dst_de
150   0000              	EXTERN ____sdcc_ll_copy_src_hlsp_dst_deixm
151   0000              	EXTERN ____sdcc_ll_lsl_hlix_a
152   0000              	EXTERN ____sdcc_ll_lsl_mbc_a
153   0000              	EXTERN ____sdcc_ll_lsr_hlix_a
154   0000              	EXTERN ____sdcc_ll_lsr_mbc_a
155   0000              	EXTERN ____sdcc_ll_push_hlix
156   0000              	EXTERN ____sdcc_ll_push_mhl
157   0000              	EXTERN ____sdcc_ll_sub_de_bc_hl
158   0000              	EXTERN ____sdcc_ll_sub_de_bc_hlix
159   0000              	EXTERN ____sdcc_ll_sub_de_hlix_bc
160   0000              	EXTERN ____sdcc_ll_sub_de_hlix_bcix
161   0000              	EXTERN ____sdcc_ll_sub_deix_bc_hl
162   0000              	EXTERN ____sdcc_ll_sub_deix_hlix
163   0000              	EXTERN ____sdcc_ll_sub_hlix_bc_deix
164   0000              	EXTERN ____sdcc_ll_sub_hlix_deix_bc
165   0000              	EXTERN ____sdcc_ll_sub_hlix_deix_bcix
166   0000              	EXTERN ____sdcc_load_debc_deix
167   0000              	EXTERN ____sdcc_load_dehl_deix
168   0000              	EXTERN ____sdcc_load_debc_mhl
169   0000              	EXTERN ____sdcc_load_hlde_mhl
170   0000              	EXTERN ____sdcc_store_dehl_bcix
171   0000              	EXTERN ____sdcc_store_debc_hlix
172   0000              	EXTERN ____sdcc_store_debc_mhl
173   0000              	EXTERN ____sdcc_cpu_pop_ei
174   0000              	EXTERN ____sdcc_cpu_pop_ei_jp
175   0000              	EXTERN ____sdcc_cpu_push_di
176   0000              	EXTERN ____sdcc_outi
177   0000              	EXTERN ____sdcc_outi_128
178   0000              	EXTERN ____sdcc_outi_256
179   0000              	EXTERN ____sdcc_ldi
180   0000              	EXTERN ____sdcc_ldi_128
181   0000              	EXTERN ____sdcc_ldi_256
182   0000              	EXTERN ____sdcc_4_copy_srcd_hlix_dst_deix
183   0000              	EXTERN ____sdcc_4_and_src_mbc_mhl_dst_deix
184   0000              	EXTERN ____sdcc_4_or_src_mbc_mhl_dst_deix
185   0000              	EXTERN ____sdcc_4_xor_src_mbc_mhl_dst_deix
186   0000              	EXTERN ____sdcc_4_or_src_dehl_dst_bcix
187   0000              	EXTERN ____sdcc_4_xor_src_dehl_dst_bcix
188   0000              	EXTERN ____sdcc_4_and_src_dehl_dst_bcix
189   0000              	EXTERN ____sdcc_4_xor_src_mbc_mhl_dst_debc
190   0000              	EXTERN ____sdcc_4_or_src_mbc_mhl_dst_debc
191   0000              	EXTERN ____sdcc_4_and_src_mbc_mhl_dst_debc
192   0000              	EXTERN ____sdcc_4_cpl_src_mhl_dst_debc
193   0000              	EXTERN ____sdcc_4_xor_src_debc_mhl_dst_debc
194   0000              	EXTERN ____sdcc_4_or_src_debc_mhl_dst_debc
195   0000              	EXTERN ____sdcc_4_and_src_debc_mhl_dst_debc
196   0000              	EXTERN ____sdcc_4_and_src_debc_hlix_dst_debc
197   0000              	EXTERN ____sdcc_4_or_src_debc_hlix_dst_debc
198   0000              	EXTERN ____sdcc_4_xor_src_debc_hlix_dst_debc
199   0000              
200   0000              ;--------------------------------------------------------
201   0000              ; Public variables in this module
202   0000              ;--------------------------------------------------------
203   0000              	GLOBAL _cf_init
204   0000              	GLOBAL _cf_read
205   0000              	GLOBAL _cf_write
206   0000              	GLOBAL _cf_set_sector
207   0000              	GLOBAL _cf_dump_sector
208   0000              ;--------------------------------------------------------
209   0000              ; Externals used
210   0000              ;--------------------------------------------------------
211   0000              	GLOBAL _vscanf_unlocked_callee
212   0000              	GLOBAL _vscanf_unlocked
213   0000              	GLOBAL _vprintf_unlocked_callee
214   0000              	GLOBAL _vprintf_unlocked
215   0000              	GLOBAL _vfscanf_unlocked_callee
216   0000              	GLOBAL _vfscanf_unlocked
217   0000              	GLOBAL _vfprintf_unlocked_callee
218   0000              	GLOBAL _vfprintf_unlocked
219   0000              	GLOBAL _ungetc_unlocked_callee
220   0000              	GLOBAL _ungetc_unlocked
221   0000              	GLOBAL _scanf_unlocked
222   0000              	GLOBAL _rewind_unlocked_fastcall
223   0000              	GLOBAL _rewind_unlocked
224   0000              	GLOBAL _puts_unlocked_fastcall
225   0000              	GLOBAL _puts_unlocked
226   0000              	GLOBAL _putchar_unlocked_fastcall
227   0000              	GLOBAL _putchar_unlocked
228   0000              	GLOBAL _putc_unlocked_callee
229   0000              	GLOBAL _putc_unlocked
230   0000              	GLOBAL _printf_unlocked
231   0000              	GLOBAL _gets_unlocked_fastcall
232   0000              	GLOBAL _gets_unlocked
233   0000              	GLOBAL _getline_unlocked_callee
234   0000              	GLOBAL _getline_unlocked
235   0000              	GLOBAL _getdelim_unlocked_callee
236   0000              	GLOBAL _getdelim_unlocked
237   0000              	GLOBAL _getchar_unlocked
238   0000              	GLOBAL _getc_unlocked_fastcall
239   0000              	GLOBAL _getc_unlocked
240   0000              	GLOBAL _fwrite_unlocked_callee
241   0000              	GLOBAL _fwrite_unlocked
242   0000              	GLOBAL _ftell_unlocked_fastcall
243   0000              	GLOBAL _ftell_unlocked
244   0000              	GLOBAL _fsetpos_unlocked_callee
245   0000              	GLOBAL _fsetpos_unlocked
246   0000              	GLOBAL _fseek_unlocked_callee
247   0000              	GLOBAL _fseek_unlocked
248   0000              	GLOBAL _fscanf_unlocked
249   0000              	GLOBAL _freopen_unlocked_callee
250   0000              	GLOBAL _freopen_unlocked
251   0000              	GLOBAL _fread_unlocked_callee
252   0000              	GLOBAL _fread_unlocked
253   0000              	GLOBAL _fputs_unlocked_callee
254   0000              	GLOBAL _fputs_unlocked
255   0000              	GLOBAL _fputc_unlocked_callee
256   0000              	GLOBAL _fputc_unlocked
257   0000              	GLOBAL _fprintf_unlocked
258   0000              	GLOBAL _fileno_unlocked_fastcall
259   0000              	GLOBAL _fileno_unlocked
260   0000              	GLOBAL _fgets_unlocked_callee
261   0000              	GLOBAL _fgets_unlocked
262   0000              	GLOBAL _fgetpos_unlocked_callee
263   0000              	GLOBAL _fgetpos_unlocked
264   0000              	GLOBAL _fgetc_unlocked_fastcall
265   0000              	GLOBAL _fgetc_unlocked
266   0000              	GLOBAL _fflush_unlocked_fastcall
267   0000              	GLOBAL _fflush_unlocked
268   0000              	GLOBAL _ferror_unlocked_fastcall
269   0000              	GLOBAL _ferror_unlocked
270   0000              	GLOBAL _feof_unlocked_fastcall
271   0000              	GLOBAL _feof_unlocked
272   0000              	GLOBAL _fclose_unlocked_fastcall
273   0000              	GLOBAL _fclose_unlocked
274   0000              	GLOBAL _clearerr_unlocked_fastcall
275   0000              	GLOBAL _clearerr_unlocked
276   0000              	GLOBAL _vsscanf_callee
277   0000              	GLOBAL _vsscanf
278   0000              	GLOBAL _vsprintf_callee
279   0000              	GLOBAL _vsprintf
280   0000              	GLOBAL _vsnprintf_callee
281   0000              	GLOBAL _vsnprintf
282   0000              	GLOBAL _vscanf_callee
283   0000              	GLOBAL _vscanf
284   0000              	GLOBAL _vprintf_callee
285   0000              	GLOBAL _vprintf
286   0000              	GLOBAL _vfscanf_callee
287   0000              	GLOBAL _vfscanf
288   0000              	GLOBAL _vfprintf_callee
289   0000              	GLOBAL _vfprintf
290   0000              	GLOBAL _vasprintf_callee
291   0000              	GLOBAL _vasprintf
292   0000              	GLOBAL _ungetc_callee
293   0000              	GLOBAL _ungetc
294   0000              	GLOBAL _sscanf
295   0000              	GLOBAL _sprintf
296   0000              	GLOBAL _snprintf
297   0000              	GLOBAL _scanf
298   0000              	GLOBAL _rewind_fastcall
299   0000              	GLOBAL _rewind
300   0000              	GLOBAL _puts_fastcall
301   0000              	GLOBAL _puts
302   0000              	GLOBAL _putchar_fastcall
303   0000              	GLOBAL _putchar
304   0000              	GLOBAL _putc_callee
305   0000              	GLOBAL _putc
306   0000              	GLOBAL _printf
307   0000              	GLOBAL _perror_fastcall
308   0000              	GLOBAL _perror
309   0000              	GLOBAL _open_memstream_callee
310   0000              	GLOBAL _open_memstream
311   0000              	GLOBAL _obstack_vprintf_callee
312   0000              	GLOBAL _obstack_vprintf
313   0000              	GLOBAL _obstack_printf
314   0000              	GLOBAL _gets_fastcall
315   0000              	GLOBAL _gets
316   0000              	GLOBAL _getline_callee
317   0000              	GLOBAL _getline
318   0000              	GLOBAL _getdelim_callee
319   0000              	GLOBAL _getdelim
320   0000              	GLOBAL _getchar
321   0000              	GLOBAL _getc_fastcall
322   0000              	GLOBAL _getc
323   0000              	GLOBAL _fwrite_callee
324   0000              	GLOBAL _fwrite
325   0000              	GLOBAL _funlockfile_fastcall
326   0000              	GLOBAL _funlockfile
327   0000              	GLOBAL _ftrylockfile_fastcall
328   0000              	GLOBAL _ftrylockfile
329   0000              	GLOBAL _ftell_fastcall
330   0000              	GLOBAL _ftell
331   0000              	GLOBAL _fsetpos_callee
332   0000              	GLOBAL _fsetpos
333   0000              	GLOBAL _fseek_callee
334   0000              	GLOBAL _fseek
335   0000              	GLOBAL _fscanf
336   0000              	GLOBAL _freopen_callee
337   0000              	GLOBAL _freopen
338   0000              	GLOBAL _fread_callee
339   0000              	GLOBAL _fread
340   0000              	GLOBAL _fputs_callee
341   0000              	GLOBAL _fputs
342   0000              	GLOBAL _fputc_callee
343   0000              	GLOBAL _fputc
344   0000              	GLOBAL _fprintf
345   0000              	GLOBAL _fopen_callee
346   0000              	GLOBAL _fopen
347   0000              	GLOBAL _fmemopen_callee
348   0000              	GLOBAL _fmemopen
349   0000              	GLOBAL _flockfile_fastcall
350   0000              	GLOBAL _flockfile
351   0000              	GLOBAL _fileno_fastcall
352   0000              	GLOBAL _fileno
353   0000              	GLOBAL _fgets_callee
354   0000              	GLOBAL _fgets
355   0000              	GLOBAL _fgetpos_callee
356   0000              	GLOBAL _fgetpos
357   0000              	GLOBAL _fgetc_fastcall
358   0000              	GLOBAL _fgetc
359   0000              	GLOBAL _fflush_fastcall
360   0000              	GLOBAL _fflush
361   0000              	GLOBAL _ferror_fastcall
362   0000              	GLOBAL _ferror
363   0000              	GLOBAL _feof_fastcall
364   0000              	GLOBAL _feof
365   0000              	GLOBAL _fdopen_callee
366   0000              	GLOBAL _fdopen
367   0000              	GLOBAL _fclose_fastcall
368   0000              	GLOBAL _fclose
369   0000              	GLOBAL _clearerr_fastcall
370   0000              	GLOBAL _clearerr
371   0000              	GLOBAL _asprintf
372   0000              	GLOBAL __fmemopen__callee
373   0000              	GLOBAL __fmemopen_
374   0000              	GLOBAL _z80_otdr_callee
375   0000              	GLOBAL _z80_otdr
376   0000              	GLOBAL _z80_otir_callee
377   0000              	GLOBAL _z80_otir
378   0000              	GLOBAL _z80_outp_callee
379   0000              	GLOBAL _z80_outp
380   0000              	GLOBAL _z80_indr_callee
381   0000              	GLOBAL _z80_indr
382   0000              	GLOBAL _z80_inir_callee
383   0000              	GLOBAL _z80_inir
384   0000              	GLOBAL _z80_inp_fastcall
385   0000              	GLOBAL _z80_inp
386   0000              	GLOBAL _z80_set_int_state_fastcall
387   0000              	GLOBAL _z80_set_int_state
388   0000              	GLOBAL _z80_get_int_state
389   0000              	GLOBAL _z80_delay_tstate_fastcall
390   0000              	GLOBAL _z80_delay_tstate
391   0000              	GLOBAL _z80_delay_ms_fastcall
392   0000              	GLOBAL _z80_delay_ms
393   0000              	GLOBAL _im2_remove_generic_callback_callee
394   0000              	GLOBAL _im2_remove_generic_callback
395   0000              	GLOBAL _im2_prepend_generic_callback_callee
396   0000              	GLOBAL _im2_prepend_generic_callback
397   0000              	GLOBAL _im2_append_generic_callback_callee
398   0000              	GLOBAL _im2_append_generic_callback
399   0000              	GLOBAL _im2_create_generic_isr_8080_callee
400   0000              	GLOBAL _im2_create_generic_isr_8080
401   0000              	GLOBAL _im2_create_generic_isr_callee
402   0000              	GLOBAL _im2_create_generic_isr
403   0000              	GLOBAL _im2_install_isr_callee
404   0000              	GLOBAL _im2_install_isr
405   0000              	GLOBAL _im2_init_fastcall
406   0000              	GLOBAL _im2_init
407   0000              	GLOBAL _ttyerr
408   0000              	GLOBAL _ttyout
409   0000              	GLOBAL _ttyin
410   0000              	GLOBAL _stderr
411   0000              	GLOBAL _stdout
412   0000              	GLOBAL _stdin
413   0000              	GLOBAL __MAX_FOPEN
414   0000              ;--------------------------------------------------------
415   0000              ; special function registers
416   0000              ;--------------------------------------------------------
417   0000              ;--------------------------------------------------------
418   0000              ; ram data
419   0000              ;--------------------------------------------------------
420   0000              	SECTION bss_compiler
421   0000              ;--------------------------------------------------------
422   0000              ; ram data
423   0000              ;--------------------------------------------------------
424   0000              
425   0000              IF 0
426   0000              
427   0000              ; .area _INITIALIZED removed by z88dk
428   0000              
429   0000              
430   0000              ENDIF
431   0000              
432   0000              ;--------------------------------------------------------
433   0000              ; absolute external ram data
434   0000              ;--------------------------------------------------------
435   0000              	SECTION IGNORE
436   0000              ;--------------------------------------------------------
437   0000              ; global & static initialisations
438   0000              ;--------------------------------------------------------
439   0000              	SECTION code_crt_init
440   0000              ;--------------------------------------------------------
441   0000              ; Home
442   0000              ;--------------------------------------------------------
443   0000              	SECTION IGNORE
444   0000              ;--------------------------------------------------------
445   0000              ; code
446   0000              ;--------------------------------------------------------
447   0000              	SECTION code_compiler
448   0000              ;cf/cf.c:5: void cf_init()
449   0000              ;	---------------------------------
450   0000              ; Function cf_init
451   0000              ; ---------------------------------
452   0000              _cf_init:
453   0000              ;cf/cf.c:9: state = 0xFF;
454   0000  0E FF       	ld	c,0xff
455   0002              ;cf/cf.c:10: while (bitRead(state, 7))
456   0002              l_cf_init_00101:
457   0002  79          	ld	a, c
458   0003  CB 07       	rlc	a
459   0005  E6 01       	and	a,0x01
460   0007  28 09       	jr	Z,l_cf_init_00103
461   0009              ;cf/cf.c:12: state = z80_inp(CF_STATUS);
462   0009  21 17 00    	ld	hl,0x0017
463   000C  CD 00 00    	call	_z80_inp_fastcall
464   000F  4D          	ld	c, l
465   0010  18 F0       	jr	l_cf_init_00101
466   0012              l_cf_init_00103:
467   0012              ;cf/cf.c:15: z80_outp(CF_FEATURE, CF_FEATURE_8BIT_MODE);
468   0012  3E 01       	ld	a,0x01
469   0014  F5          	push	af
470   0015  33          	inc	sp
471   0016  21 11 00    	ld	hl,0x0011
472   0019  E5          	push	hl
473   001A  CD 00 00    	call	_z80_outp_callee
474   001D              ;cf/cf.c:16: z80_outp(CF_COMMAND, IDE_CMD_SETFEATURES);
475   001D  3E EF       	ld	a,0xef
476   001F  F5          	push	af
477   0020  33          	inc	sp
478   0021  21 17 00    	ld	hl,0x0017
479   0024  E5          	push	hl
480   0025  CD 00 00    	call	_z80_outp_callee
481   0028              ;cf/cf.c:17: z80_outp(CF_FEATURE, CF_FEATURE_DISABLE_WRITE_CACHING);
482   0028  3E 82       	ld	a,0x82
483   002A  F5          	push	af
484   002B  33          	inc	sp
485   002C  21 11 00    	ld	hl,0x0011
486   002F  E5          	push	hl
487   0030  CD 00 00    	call	_z80_outp_callee
488   0033              ;cf/cf.c:18: z80_outp(CF_COMMAND, IDE_CMD_SETFEATURES);
489   0033  3E EF       	ld	a,0xef
490   0035  F5          	push	af
491   0036  33          	inc	sp
492   0037  21 17 00    	ld	hl,0x0017
493   003A  E5          	push	hl
494   003B  CD 00 00    	call	_z80_outp_callee
495   003E              ;cf/cf.c:19: }
496   003E  C9          	ret
497   003F              	SECTION code_compiler
498   003F              ;cf/cf.c:21: void cf_read(uint32_t sector, uint8_t* data)
499   003F              ;	---------------------------------
500   003F              ; Function cf_read
501   003F              ; ---------------------------------
502   003F              _cf_read:
503   003F              ;cf/cf.c:26: state = 0xFF;
504   003F  0E FF       	ld	c,0xff
505   0041              ;cf/cf.c:27: while (bitRead(state, 7) || !bitRead(state, 6)) // wait for !busy 0x80 and ready 0x40
506   0041              l_cf_read_00102:
507   0041  79          	ld	a, c
508   0042  CB 07       	rlc	a
509   0044  E6 01       	and	a,0x01
510   0046  20 08       	jr	NZ,l_cf_read_00103
511   0048  79          	ld	a, c
512   0049  07          	rlca
513   004A  07          	rlca
514   004B  E6 03       	and	a,0x03
515   004D  0F          	rrca
516   004E  38 09       	jr	C,l_cf_read_00104
517   0050              l_cf_read_00103:
518   0050              ;cf/cf.c:29: state = z80_inp(CF_STATUS);
519   0050  21 17 00    	ld	hl,0x0017
520   0053  CD 00 00    	call	_z80_inp_fastcall
521   0056  4D          	ld	c, l
522   0057  18 E8       	jr	l_cf_read_00102
523   0059              l_cf_read_00104:
524   0059              ;cf/cf.c:32: z80_outp(CF_NUMSECT, 1); // read only a single sector at a time
525   0059  3E 01       	ld	a,0x01
526   005B  F5          	push	af
527   005C  33          	inc	sp
528   005D  21 12 00    	ld	hl,0x0012
529   0060  E5          	push	hl
530   0061  CD 00 00    	call	_z80_outp_callee
531   0064              ;cf/cf.c:33: cf_set_sector(sector);
532   0064  FD 21 02 00 	ld	iy,2
533   0068  FD 39       	add	iy, sp
534   006A  FD 6E 02    	ld	l,(iy+2)
535   006D  FD 66 03    	ld	h,(iy+3)
536   0070  E5          	push	hl
537   0071  FD 6E 00    	ld	l,(iy+0)
538   0074  FD 66 01    	ld	h,(iy+1)
539   0077  E5          	push	hl
540   0078  CD 67 01    	call	_cf_set_sector
541   007B  F1          	pop	af
542   007C  F1          	pop	af
543   007D              ;cf/cf.c:35: z80_outp(CF_COMMAND, IDE_CMD_READ);
544   007D  3E 20       	ld	a,0x20
545   007F  F5          	push	af
546   0080  33          	inc	sp
547   0081  21 17 00    	ld	hl,0x0017
548   0084  E5          	push	hl
549   0085  CD 00 00    	call	_z80_outp_callee
550   0088              ;cf/cf.c:37: state = 0xFF;
551   0088  0E FF       	ld	c,0xff
552   008A              ;cf/cf.c:38: while (bitRead(state, 7) || !bitRead(state, 3)) // wait for !busy 0x80 and dry 0x08
553   008A              l_cf_read_00106:
554   008A  79          	ld	a, c
555   008B  CB 07       	rlc	a
556   008D  E6 01       	and	a,0x01
557   008F  20 09       	jr	NZ,l_cf_read_00107
558   0091  79          	ld	a, c
559   0092  0F          	rrca
560   0093  0F          	rrca
561   0094  0F          	rrca
562   0095  E6 1F       	and	a,0x1f
563   0097  0F          	rrca
564   0098  38 09       	jr	C,l_cf_read_00118
565   009A              l_cf_read_00107:
566   009A              ;cf/cf.c:40: state = z80_inp(CF_STATUS);
567   009A  21 17 00    	ld	hl,0x0017
568   009D  CD 00 00    	call	_z80_inp_fastcall
569   00A0  4D          	ld	c, l
570   00A1  18 E7       	jr	l_cf_read_00106
571   00A3              ;cf/cf.c:43: for (i = 0; i < SECTOR_SIZE; i++)
572   00A3              l_cf_read_00118:
573   00A3  11 00 00    	ld	de,0x0000
574   00A6              l_cf_read_00110:
575   00A6              ;cf/cf.c:45: data[i] = z80_inp(CF_DATA);
576   00A6  FD 21 06 00 	ld	iy,6
577   00AA  FD 39       	add	iy, sp
578   00AC  FD 6E 00    	ld	l,(iy+0)
579   00AF  FD 66 01    	ld	h,(iy+1)
580   00B2  19          	add	hl, de
581   00B3  E5          	push	hl
582   00B4  21 10 00    	ld	hl,0x0010
583   00B7  CD 00 00    	call	_z80_inp_fastcall
584   00BA  7D          	ld	a, l
585   00BB  E1          	pop	hl
586   00BC  77          	ld	(hl), a
587   00BD              ;cf/cf.c:43: for (i = 0; i < SECTOR_SIZE; i++)
588   00BD  13          	inc	de
589   00BE  7A          	ld	a, d
590   00BF  EE 80       	xor	a,0x80
591   00C1  D6 82       	sub	a,0x82
592   00C3  38 E1       	jr	C,l_cf_read_00110
593   00C5              ;cf/cf.c:47: }
594   00C5  C9          	ret
595   00C6              	SECTION code_compiler
596   00C6              ;cf/cf.c:49: void cf_write(uint32_t sector, uint8_t* data)
597   00C6              ;	---------------------------------
598   00C6              ; Function cf_write
599   00C6              ; ---------------------------------
600   00C6              _cf_write:
601   00C6              ;cf/cf.c:54: state = 0xFF;
602   00C6  0E FF       	ld	c,0xff
603   00C8              ;cf/cf.c:55: while (bitRead(state, 7) || !bitRead(state, 6)) // wait for !busy 0x80 and ready 0x40
604   00C8              l_cf_write_00102:
605   00C8  79          	ld	a, c
606   00C9  CB 07       	rlc	a
607   00CB  E6 01       	and	a,0x01
608   00CD  20 08       	jr	NZ,l_cf_write_00103
609   00CF  79          	ld	a, c
610   00D0  07          	rlca
611   00D1  07          	rlca
612   00D2  E6 03       	and	a,0x03
613   00D4  0F          	rrca
614   00D5  38 09       	jr	C,l_cf_write_00104
615   00D7              l_cf_write_00103:
616   00D7              ;cf/cf.c:57: state = z80_inp(CF_STATUS);
617   00D7  21 17 00    	ld	hl,0x0017
618   00DA  CD 00 00    	call	_z80_inp_fastcall
619   00DD  4D          	ld	c, l
620   00DE  18 E8       	jr	l_cf_write_00102
621   00E0              l_cf_write_00104:
622   00E0              ;cf/cf.c:60: z80_outp(CF_NUMSECT, 1); // read only a single sector at a time
623   00E0  3E 01       	ld	a,0x01
624   00E2  F5          	push	af
625   00E3  33          	inc	sp
626   00E4  21 12 00    	ld	hl,0x0012
627   00E7  E5          	push	hl
628   00E8  CD 00 00    	call	_z80_outp_callee
629   00EB              ;cf/cf.c:61: cf_set_sector(sector);
630   00EB  FD 21 02 00 	ld	iy,2
631   00EF  FD 39       	add	iy, sp
632   00F1  FD 6E 02    	ld	l,(iy+2)
633   00F4  FD 66 03    	ld	h,(iy+3)
634   00F7  E5          	push	hl
635   00F8  FD 6E 00    	ld	l,(iy+0)
636   00FB  FD 66 01    	ld	h,(iy+1)
637   00FE  E5          	push	hl
638   00FF  CD 67 01    	call	_cf_set_sector
639   0102  F1          	pop	af
640   0103  F1          	pop	af
641   0104              ;cf/cf.c:63: z80_outp(CF_COMMAND, IDE_CMD_WRITE);
642   0104  3E 30       	ld	a,0x30
643   0106  F5          	push	af
644   0107  33          	inc	sp
645   0108  21 17 00    	ld	hl,0x0017
646   010B  E5          	push	hl
647   010C  CD 00 00    	call	_z80_outp_callee
648   010F              ;cf/cf.c:65: state = 0xFF;
649   010F  0E FF       	ld	c,0xff
650   0111              ;cf/cf.c:66: while (bitRead(state, 7) || !bitRead(state, 3)) // wait for !busy 0x80 and dry 0x08
651   0111              l_cf_write_00106:
652   0111  79          	ld	a, c
653   0112  CB 07       	rlc	a
654   0114  E6 01       	and	a,0x01
655   0116  20 09       	jr	NZ,l_cf_write_00107
656   0118  79          	ld	a, c
657   0119  0F          	rrca
658   011A  0F          	rrca
659   011B  0F          	rrca
660   011C  E6 1F       	and	a,0x1f
661   011E  0F          	rrca
662   011F  38 09       	jr	C,l_cf_write_00122
663   0121              l_cf_write_00107:
664   0121              ;cf/cf.c:68: state = z80_inp(CF_STATUS);
665   0121  21 17 00    	ld	hl,0x0017
666   0124  CD 00 00    	call	_z80_inp_fastcall
667   0127  4D          	ld	c, l
668   0128  18 E7       	jr	l_cf_write_00106
669   012A              ;cf/cf.c:71: for (i = 0; i < SECTOR_SIZE; i++)
670   012A              l_cf_write_00122:
671   012A  11 00 00    	ld	de,0x0000
672   012D              l_cf_write_00114:
673   012D              ;cf/cf.c:73: z80_outp(CF_DATA, data[i]);
674   012D  FD 21 06 00 	ld	iy,6
675   0131  FD 39       	add	iy, sp
676   0133  FD 6E 00    	ld	l,(iy+0)
677   0136  FD 66 01    	ld	h,(iy+1)
678   0139  19          	add	hl, de
679   013A  7E          	ld	a, (hl)
680   013B  F5          	push	af
681   013C  33          	inc	sp
682   013D  21 10 00    	ld	hl,0x0010
683   0140  E5          	push	hl
684   0141  CD 00 00    	call	_z80_outp_callee
685   0144              ;cf/cf.c:71: for (i = 0; i < SECTOR_SIZE; i++)
686   0144  13          	inc	de
687   0145  7A          	ld	a, d
688   0146  EE 80       	xor	a,0x80
689   0148  D6 82       	sub	a,0x82
690   014A  38 E1       	jr	C,l_cf_write_00114
691   014C              ;cf/cf.c:76: state = 0xFF;
692   014C  0E FF       	ld	c,0xff
693   014E              ;cf/cf.c:77: while (bitRead(state, 7) || !bitRead(state, 6)) // wait for !busy 0x80 and ready 0x40
694   014E              l_cf_write_00111:
695   014E  79          	ld	a, c
696   014F  CB 07       	rlc	a
697   0151  E6 01       	and	a,0x01
698   0153  20 08       	jr	NZ,l_cf_write_00112
699   0155  79          	ld	a, c
700   0156  07          	rlca
701   0157  07          	rlca
702   0158  E6 03       	and	a,0x03
703   015A  0F          	rrca
704   015B  38 09       	jr	C,l_cf_write_00116
705   015D              l_cf_write_00112:
706   015D              ;cf/cf.c:79: state = z80_inp(CF_STATUS);
707   015D  21 17 00    	ld	hl,0x0017
708   0160  CD 00 00    	call	_z80_inp_fastcall
709   0163  4D          	ld	c, l
710   0164  18 E8       	jr	l_cf_write_00111
711   0166              l_cf_write_00116:
712   0166              ;cf/cf.c:81: }
713   0166  C9          	ret
714   0167              	SECTION code_compiler
715   0167              ;cf/cf.c:83: void cf_set_sector(uint32_t sector)
716   0167              ;	---------------------------------
717   0167              ; Function cf_set_sector
718   0167              ; ---------------------------------
719   0167              _cf_set_sector:
720   0167              ;cf/cf.c:85: z80_outp(CF_ADDR0, (sector >> 0) & 0xFF);
721   0167  FD 21 02 00 	ld	iy,2
722   016B  FD 39       	add	iy, sp
723   016D  FD 7E 00    	ld	a,(iy+0)
724   0170  F5          	push	af
725   0171  33          	inc	sp
726   0172  21 13 00    	ld	hl,0x0013
727   0175  E5          	push	hl
728   0176  CD 00 00    	call	_z80_outp_callee
729   0179              ;cf/cf.c:86: z80_outp(CF_ADDR1, (sector >> 8) & 0xFF);
730   0179  D1          	pop	de
731   017A  C1          	pop	bc
732   017B  C5          	push	bc
733   017C  D5          	push	de
734   017D  0E 00       	ld	c,0x00
735   017F  C5          	push	bc
736   0180  33          	inc	sp
737   0181  21 14 00    	ld	hl,0x0014
738   0184  E5          	push	hl
739   0185  CD 00 00    	call	_z80_outp_callee
740   0188              ;cf/cf.c:87: z80_outp(CF_ADDR2, (sector >> 16) & 0xFF);
741   0188  FD 21 02 00 	ld	iy,2
742   018C  FD 39       	add	iy, sp
743   018E  FD 46 02    	ld	b,(iy+2)
744   0191  FD 4E 03    	ld	c,(iy+3)
745   0194  C5          	push	bc
746   0195  33          	inc	sp
747   0196  21 15 00    	ld	hl,0x0015
748   0199  E5          	push	hl
749   019A  CD 00 00    	call	_z80_outp_callee
750   019D              ;cf/cf.c:88: z80_outp(CF_ADDR3, ((sector >> 24) & 0xFF) | CF_ADDR3_ADDITIONAL);
751   019D  FD 21 02 00 	ld	iy,2
752   01A1  FD 39       	add	iy, sp
753   01A3  FD 7E 03    	ld	a,(iy+3)
754   01A6  1E 00       	ld	e,0x00
755   01A8  F6 E0       	or	a,0xe0
756   01AA  F5          	push	af
757   01AB  33          	inc	sp
758   01AC  21 16 00    	ld	hl,0x0016
759   01AF  E5          	push	hl
760   01B0  CD 00 00    	call	_z80_outp_callee
761   01B3              ;cf/cf.c:89: }
762   01B3  C9          	ret
763   01B4              	SECTION code_compiler
764   01B4              ;cf/cf.c:91: void cf_dump_sector(uint8_t* data)
765   01B4              ;	---------------------------------
766   01B4              ; Function cf_dump_sector
767   01B4              ; ---------------------------------
768   01B4              _cf_dump_sector:
769   01B4  DD E5       	push	ix
770   01B6  DD 21 00 00 	ld	ix,0
771   01BA  DD 39       	add	ix,sp
772   01BC              ;cf/cf.c:94: for (i = 0; i < SECTOR_SIZE; i++)
773   01BC  01 00 00    	ld	bc,0x0000
774   01BF              l_cf_dump_sector_00104:
775   01BF              ;cf/cf.c:96: if (i % 32 == 0)
776   01BF  79          	ld	a, c
777   01C0  E6 1F       	and	a,0x1f
778   01C2  20 0E       	jr	NZ,l_cf_dump_sector_00102
779   01C4              ;cf/cf.c:98: putchar('\r');
780   01C4  C5          	push	bc
781   01C5  21 0D 00    	ld	hl,0x000d
782   01C8  CD 00 00    	call	_putchar_fastcall
783   01CB  21 0A 00    	ld	hl,0x000a
784   01CE  CD 00 00    	call	_putchar_fastcall
785   01D1  C1          	pop	bc
786   01D2              l_cf_dump_sector_00102:
787   01D2              ;cf/cf.c:101: printf("%02X", data[i]);
788   01D2  DD 6E 04    	ld	l,(ix+4)
789   01D5  DD 66 05    	ld	h,(ix+5)
790   01D8  09          	add	hl, bc
791   01D9  5E          	ld	e, (hl)
792   01DA  16 00       	ld	d,0x00
793   01DC  C5          	push	bc
794   01DD  D5          	push	de
795   01DE  21 00 00    	ld	hl,___str_0
796   01E1  E5          	push	hl
797   01E2  CD 00 00    	call	_printf
798   01E5  F1          	pop	af
799   01E6  F1          	pop	af
800   01E7  C1          	pop	bc
801   01E8              ;cf/cf.c:94: for (i = 0; i < SECTOR_SIZE; i++)
802   01E8  03          	inc	bc
803   01E9  78          	ld	a, b
804   01EA  D6 02       	sub	a,0x02
805   01EC  38 D1       	jr	C,l_cf_dump_sector_00104
806   01EE              ;cf/cf.c:103: }
807   01EE  DD E1       	pop	ix
808   01F0  C9          	ret
809   01F1              	SECTION rodata_compiler
810   0000              ___str_0:
811   0000  25 30 32 58 	DEFM "%02X"
812   0004  00          	DEFB 0x00
813   0005              	SECTION IGNORE
814   0000              
